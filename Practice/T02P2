#include<fstream>
#include<iostream>
#include<string>
#include<stack>
using namespace std;

/*
void reverse() {
	string word = "theworldisinyourpocket";
	cout << word;
	queue<char> Q;
	for (char ch: word) {
		Q.push(ch);
	}
	for (int i = word.length() - 1; i > 0; i--) {
		word[i] = Q.front();
		Q.pop();
	}
}
*/
class Stack {
private:
	int *A; //for array based stack
	int size;
	int top;
public:

	Stack() {
		A = new int [100];
		size = 0;
		top = -1;
	}
	Stack(int s) {
		size = s;
		A = new int [size];
		top = -1;
	}

	void Push(int x) {
		if (!Full()) 
		{
			top++;
			top = x;
		}
	}

	int Pop() {
		int temp;
		if (!Empty()) {
			temp = A[top];
			top--;
			return temp;
		}
		else cout << "can't remove from empty stack\n";
		return -1;

	}
	void reverse() {
		string word = "theworldisinyourpocket";
		for (int i = 0; i < word.length(); i++) {
			cout << word[i];
			Push(word[i]);
		}
			
			for (int i = 0; i < word.length(); i++) {
				word[i] = top;
				Pop();	
			}

	 }

	bool Full() {
		return top == 0;
	}

	bool Empty() {
		return top < 0;
	}
	void Print() {
		string word = "theworldisinyourpocket\n\n";
	}
};

int main() {
	
	//Stack S;
	int values[] = { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 };
	Stack s;
	for (int i = 0; i < 10; i++) {
		s.Push(values[i]);
	}

	int n = 25;

	for (int i = 0; i < 4; i++) {
		n += s.Pop();
	}
	for (int i = 0; i < 2; i++)
	{
		n -= s.Pop();
	}
	cout << n << endl;
	
	//S.Print();
	//cout << word << endl;
	//reverse(word);
	//cout << word;

	return 0;
}
